# convert to matrix
df_mat = data.matrix(df)
mode(df_mat)
# view first 5 genes of data
head(df_mat, 5)
df_mat <- as.numeric(unlist(df))
mode(df)
head(df, 5)
df_mat <- as.numeric(unlist(df))
mode(df)
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# log2 transformation
df = log2(df)
head(df, 5)
# rows scaling
df = pheatmap(df, scale = "row", main = "row scaling")
head(df, 5)
# view first 5 genes of data
head(df_mat, 5)
head(df, 5)
# create a data frame for column annotation
sample_group <- data.frame(sample = rep(c("COVID_Crit", "COVID_Neg", "COVID_PCR+
"), c(8, 8, 8)))
row.names(sample_group) <- colnames(df_mat)
head(sample_group)
pheatmap(df, annotation_col = sample_group, main = 'ECFCs_COVID')
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# log2 transformation
df = log2(df)
head(df, 5)
# rows scaling
df = pheatmap(df, scale = "row", main = "row scaling")
head(df, 5)
# view first 5 genes of data
# convert to matrix
df_mat = data.matrix(df)
mode(df_mat)
lapply(df_mat.numeric)
lapply(df_mat, as.numeric)
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# log2 transformation
df = log2(df)
head(df, 5)
# rows scaling
df = pheatmap(df, scale = "row",  main = "row scaling")
head(df, 5)
# create a data frame for column annotation
sample_group <- data.frame(sample = rep(c("COVID_Crit", "COVID_Neg", "COVID_PCR+
"), c(8, 8, 8)))
row.names(sample_group) <- colnames(df_mat)
head(sample_group)
pheatmap(df_mat, na_col = "black", annotation_col = sample_group, main = 'ECFCs_COVID')
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# log2 transformation
df = log2(df)
head(df, 5)
# calculate z score
cal_z_score <- function(x){
(x - mean(x)) / sd(x)
}
df_mat <- t(apply(df, 1, cal_z_score))
pheatmap(df_mat)
View(df_mat)
View(df)
# calculate z score
cal_z_score <- function(x){
(x - mean(x)) / sd(x)
}
df_mat <- t(apply(df, 1, cal_z_score))
View(df_mat)
# read the dataframe
df = read.csv("HeatMap_z.csv", row.names="IDs")
# log2 transformation
df = log2(df)
View(df)
# create a data frame for column annotation
sample_group <- data.frame(sample = rep(c("COVID_Crit", "COVID_Neg", "COVID_PCR+
"), c(8, 8, 8)))
row.names(sample_group) <- colnames(df_mat)
head(sample_group)
pheatmap(df_mat, na_col = "black", annotation_col = sample_group, main = 'ECFCs_COVID')
color <- colorRampPalette((c("blue", "white", "red")))(50)
pheatmap(df_mat, color = color, annotation_col = Group, main = "ENRC_other")
# read the dataframe
df = read.csv("HeatMap_z.csv", row.names="IDs")
View(df)
# create a data frame for column annotation
sample_group <- data.frame(sample = rep(c("COVID_Crit", "COVID_Neg", "COVID_PCR+
"), c(8, 8, 8)))
row.names(sample_group) <- colnames(df_mat)
head(sample_group)
pheatmap(df_mat, na_col = "black", annotation_col = sample_group, main = 'ECFCs_COVID')
pheatmap(df, na_col = "black", annotation_col = sample_group, main = 'ECFCs_COVID')
color <- colorRampPalette((c("blue", "white", "red")))(50)
pheatmap(df_mat, color = color, annotation_col = Group, main = "ENRC_other")
# reducing the cell width
pheatmap(df_mat, color = color, angle_col = 45, annotation_row = marker_type, cluster_rows = FALSE, cluster_cols = FALSE,
main = "ENRC_other", cellwidth=25)
# and if you want rotate the column names (in case if they are too long)
pheatmap(df_mat, color = color, angle_col = 45, annotation_row = marker_type, cluster_rows = FALSE, cluster_cols = FALSE,
main = "ENRC_other", cellwidth=25)
setwd("C:/Data/Articles/Manuscript/NOSecret/NewHeatmap")
setwd("C:/Data/Articles/Manuscript/NOSecret/NewHeatmap")
install.packages("gridExtra")
library(gridExtra)
# read the dataframe
df1 = read.csv("ENRC_other.csv", row.names="Genes")
df2 = read.csv("ENRI_other.csv", row.names="Genes")
# convert to matrix
df_mat1 = data.matrix(df1)
df_mat2 = data.matrix(df2)
# view first 5 genes of data
head(df1, 5)
head(df2, 5)
pheatmap(df_mat1, cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(df_mat1, cluster_rows = FALSE, cluster_cols = FALSE)
# load the library
library(pheatmap)
pheatmap(df_mat1, cluster_rows = FALSE, cluster_cols = FALSE)
# adding annotations
marker_type1 = read.csv("ENRC_other_annot.csv", row.names="Genes")
head(marker_type1)
marker_type2 = read.csv("ENRI_other_annot.csv", row.names="Genes")
head(marker_type2)
ENRC = pheatmap(df_mat1, annotation_row = marker_type, cluster_rows = FALSE, cluster_cols = FALSE,
main = "ENRC_other")
ENRC = pheatmap(df_mat1, annotation_row = marker_type1, cluster_rows = FALSE, cluster_cols = FALSE,
main = "ENRC_other")
ENRI = pheatmap(df_mat2, annotation_row = marker_type2, cluster_rows = FALSE, cluster_cols = FALSE,
main = "ENRC_other")
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]]))
# read the dataframe
df1 = read.csv("ENRC_other.csv", row.names="Genes")
df2 = read.csv("ENRI_other.csv", row.names="Genes")
df3 = read.csv("ENRI_vs_ENRC.csv", row.names="Genes")
# convert to matrix
df_mat1 = data.matrix(df1)
df_mat2 = data.matrix(df2)
df_mat3 = data.matrix(df3)
# view first 5 genes of data
head(df1, 5)
head(df2, 5)
head(df3,5)
# adding annotations
marker_type1 = read.csv("ENRC_other_annot.csv", row.names="Genes")
head(marker_type1)
marker_type2 = read.csv("ENRI_other_annot.csv", row.names="Genes")
head(marker_type2)
marker_type3 = read.csv("ENRI_vs_ENRC_annot.csv", row.names="Genes")
head(marker_type2)
ENRC = pheatmap(df_mat1, annotation_row = marker_type1,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 5, fontsize_col = 5, na_col = "black",
main = "ENRC_other")
ENRC = pheatmap(df_mat1, annotation_row = marker_type1,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "grey",
main = "ENRC_other")
ENRI = pheatmap(df_mat2, annotation_row = marker_type2,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "grey",
main = "ENRI_other")
ENRI_vs_ENRC = pheatmap(df_mat3, annotation_row = marker_type3,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "grey",
main = "ENRI_vs_ENRC")
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]], ENRI_vs_ENRC[[8]]))
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]], ENRI_vs_ENRC[[4]]))
# read the dataframe
df1 = read.csv("ENRC_other.csv", row.names="Genes")
df2 = read.csv("ENRI_other.csv", row.names="Genes")
df3 = read.csv("ENRI_vs_ENRC.csv", row.names="Genes") # skip
# convert to matrix
df_mat1 = data.matrix(df1)
df_mat2 = data.matrix(df2)
# view first 5 genes of data
head(df1, 5)
head(df2, 5)
# adding annotations
marker_type1 = read.csv("ENRC_other_annot.csv", row.names="Genes")
head(marker_type1)
marker_type2 = read.csv("ENRI_other_annot.csv", row.names="Genes")
head(marker_type2)
ENRC = pheatmap(df_mat1, annotation_row = marker_type1,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "lightgrey",
main = "ENRC_other")
ENRI = pheatmap(df_mat2, annotation_row = marker_type2,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "lightgrey",
main = "ENRI_other")
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]]))
color <- colorRampPalette((c("blue", "white", "red")))(50)
ENRC = pheatmap(df_mat1, annotation_row = marker_type1, color = color,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "lightgrey",
main = "ENRC_other")
ENRI = pheatmap(df_mat2, annotation_row = marker_type2, color = color,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "lightgrey",
main = "ENRI_other")
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]]))
ENRC = pheatmap(df_mat1, annotation_row = marker_type1, color = color, width = 5, height = 7,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "lightgrey",
main = "ENRC_other")
ENRI = pheatmap(df_mat2, annotation_row = marker_type2, color = color, width = 5, height = 7,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "lightgrey",
main = "ENRI_other")
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]]))
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]]))
ENRC = pheatmap(df_mat1, annotation_row = marker_type1, color = color, angle_col = 45,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 8, fontsize_col = 8, na_col = "lightgrey",
main = "ENRC_other")
ENRI = pheatmap(df_mat2, annotation_row = marker_type2, color = color, angle_col = 45,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 8, fontsize_col = 8, na_col = "lightgrey",
main = "ENRI_other")
grid.arrange(grobs = list(ENRC[[4]], ENRI[[4]]))
df3 = read.csv("ENRI_vs_ENRC.csv", row.names="Genes") # skip
df_mat3 = data.matrix(df3) # skip
head(df3,5) # skip
marker_type3 = read.csv("ENRI_vs_ENRC_annot.csv", row.names="Genes") # skip
ENRI_vs_ENRC = pheatmap(df_mat3, annotation_row = marker_type3,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 7, fontsize_col = 7, na_col = "lightgrey",
main = "ENRI_vs_ENRC") # skip
ENRI_vs_ENRC = pheatmap(df_mat3, annotation_row = marker_type3, color = color, angle_col = 45,
cluster_rows = FALSE, cluster_cols = FALSE,
cellwidth = 25, fontsize_row = 8, fontsize_col = 8, na_col = "lightgrey",
main = "ENRI_vs_ENRC")
setwd("C:/Users/BhosaleS/Downloads")
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# calculate z score
cal_z_score <- function(x){
(x - mean(x)) / sd(x)
}
df_mat <- t(apply(df, 1, cal_z_score))
View(df_mat)
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# log2 transformation
df = log2(df)
View(df)
# calculate z score
cal_z_score <- function(x){
(x - mean(x)) / sd(x)
}
df_mat <- t(apply(df, 1, cal_z_score))
View(df_mat)
pheatmap(df_mat)
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# log2 transformation
df = log2(df)
View(df)
# convert to matrix
df_mat = data.matrix(df)
head(df, 5)
head(df_mat, 5)
# scale the data
pheatmap(df_mat, scale = "row", main = "row scaling")
# create a data frame for column annotation
sample_group <- data.frame(sample = rep(c("COVID_Crit", "COVID_Neg", "COVID_PCR+
"), c(8, 8, 8)))
row.names(sample_group) <- colnames(df_mat)
head(sample_group)
pheatmap(df, na_col = "black", annotation_col = sample_group, main = 'ECFCs_COVID')
color <- colorRampPalette((c("blue", "white", "red")))(50)
pheatmap(df_mat, color = color, annotation_col = Group, main = "ENRC_other")
pheatmap(df_mat, color = color, annotation_col = sample_group, main = "ENRC_other")
# reducing the cell width
pheatmap(df_mat, color = color, angle_col = 45, annotation_row = marker_type, cluster_rows = FALSE, cluster_cols = FALSE,
main = "ENRC_other", cellwidth=25)
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# log2 transformation
df = log2(df)
View(df)
# convert to matrix
df_mat = data.matrix(df)
head(df_mat, 5)
# scale the data
pheatmap(df_mat, scale = "row", main = "row scaling")
View(df_mat)
# log2 transformation
df = log2(df)
View(df)
# convert to matrix
df_mat = data.matrix(df)
head(df_mat, 5)
cal_z_score <- function(x){
(x - mean(x)) / sd(x)
}
data_subset_norm <- t(apply(data_subset, 1, cal_z_score))
df_mat_z <- t(apply(df_mat, 1, cal_z_score))
View(df_mat_z)
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# convert to matrix
df_mat = data.matrix(df)
head(df_mat, 5)
# scale the data
pheatmap(df_mat, scale = "row", main = "row scaling")
# read the dataframe
df = read.csv("HeatMap1.csv", row.names="IDs")
# convert to matrix
df_mat = data.matrix(df)
head(df_mat, 5)
# scale the data
pheatmap(df_mat, scale = "row", main = "row scaling")
# create a data frame for column annotation
sample_group <- data.frame(sample = rep(c("COVID_Crit", "COVID_Neg", "COVID_PCR+
"), c(8, 8, 8)))
row.names(sample_group) <- colnames(df_mat)
head(sample_group)
pheatmap(df_mat, na_col = "lightgrey", annotation_col = sample_group, main = 'ECFCs_COVID')
pheatmap(df_mat, na_col = "lightgrey", scale = 'row', annotation_col = sample_group, main = 'ECFCs_COVID')
color <- colorRampPalette((c("blue", "white", "red")))(50)
pheatmap(df_mat, color = color, scale = 'row', annotation_col = sample_group, main = "ECFCs_COVID")
# heatmap with cluster break
pheatmap(df_mat, color = color, scale = 'row', annotation_col = sample_group, cutree_rows = 5, cutree_cols = 3, main = "ECFCs_COVID")
# heatmap with cluster break
pheatmap(df_mat, color = color, scale = 'row', annotation_col = sample_group, cutree_rows = 2, cutree_cols = 3, main = "ECFCs_COVID")
# alter the cell width
pheatmap(df_mat, color = color, cellwidth = 25, scale = 'row', annotation_col = sample_group, cutree_rows = 2, cutree_cols = 3, main = "ECFCs_COVID")
# alter the cell width
pheatmap(df_mat, color = color, cellwidth = 5, scale = 'row', annotation_col = sample_group, cutree_rows = 2, cutree_cols = 3, main = "ECFCs_COVID")
# heatmap with cluster break
pheatmap(df_mat, color = color, scale = 'row', fontsize = 5, annotation_col = sample_group, cutree_rows = 2, cutree_cols = 3, main = "ECFCs_COVID")
# heatmap with cluster break
pheatmap(df_mat, color = color, scale = 'row', fontsize_row = 5, fontsize_col = 5, annotation_col = sample_group, cutree_rows = 2, cutree_cols = 3, main = "ECFCs_COVID")
setwd("C:/Data/Documents/Personal/CV-first-repo-master")
setwd("C:/Data/Documents/Personal/SDB_Personal")
setwd("C:/Data/Documents/Personal")
setwd("C:/Users/BhosaleS/Downloads")
df <- read.csv("test_kegg.csv")
GOCircle(df)
detach("package:base", unload = TRUE)
library(GOplot)
GOCircle(df)
df <- read.csv("test_kegg.csv")
GOCircle(df)
GOCircle(df, title, rad1, rad2, table.legend = T, zsc.col, lfc.col, label.size, label.fontface)
GOCircle(df, title, rad1, rad2, table.legend = T, zsc.col, lfc.col, label.fontface)
GOCircle(df, title, rad1, rad2, table.legend = T, zsc.col, lfc.col)
mode(data)
df <- read.csv("kegg_serum.csv")
data <- as.matrix(df)
mode(data)
GOCircle(data, title, rad1, rad2, table.legend = T, zsc.col, lfc.col)
#convert vector to data frame
data_x <- as.data.frame(t(df))
#display data frame
mode(data_x)
GOCircle(data_x, title, rad1, rad2, table.legend = T, zsc.col, lfc.col)
data <- as.matrix(data_x)
mode(data)
df <- read.csv("kegg_serum.csv")
GOCircle(df, title, rad1, rad2, table.legend = T, zsc.col, lfc.col)
df <- read.csv("kegg_serum.csv")
GOCircle(df, title, rad1, rad2, table.legend = T, zsc.col, lfc.col)
GOCircle(df)
df <- read.csv("kegg_serum.csv")
df <- read.csv("kegg_serum.csv")
df <- read.csv("kegg_serum.csv")
df <- read.csv("kegg_serum.csv")
head(df)
GOCircle(df)
df <- read.csv("test_kegg.csv")
head(df)
GOCircle(df)
df <- read.csv("kegg_serum.csv")
head(df)
GOCircle(df)
df <- read.csv("test_kegg.csv")
head(df)
GOCircle(df)
library('GOplot')
df <- read.csv("test_kegg.csv")
head(df)
GOCircle(df)
data(EC)
:
## Not run:
# # Load the included dataset
data(EC)
#
# # Building the circ object
circ <- circle_dat(EC$david, EC$genelist)
#
# # Creating the circular plot
GOCircle(circ)
#
# # Creating the circular plot with a different colour scale for the logFC
GOCircle(circ, lfc.col = c('purple', 'orange'))
#
# # Creating the circular plot with a different colour scale for the z-score
GOCircle(circ, zsc.col = c('yellow', 'black', 'cyan'))
#
# # Creating the circular plot with different font style
GOCircle(circ, label.size = 5, label.fontface = 'italic')
head(EC)
df <- read.csv('kegg_serum.csv')
View(df)
View(df)
circ <- circle_df(EC$ID, EC$genes)
circ <- circle_dat(df$ID, df$genes)
## Not run:
# # Load the included dataset
data(EC)
write.csv('EC')
write.csv('EC', 'test_go.csv')
## Not run:
# # Load the included dataset
data(EC)
write.csv('EC', 'test_go.csv')
data <- write.csv('EC', 'test_go.csv')
data <- write.csv(EC, 'test_go.csv')
write.csv(EC, 'test_go.csv')
write.csv(EC, "test_go.csv")
write.csv2(EC, "test_go.csv")
write.xlsx(EC, "test_go.xlsx")
install.packages('xlsx')
library(xlsx)
library(xlsx)
library(xlsx)
write.xlsx(EC, "test_go.xlsx")
detach("package:GOplot", unload = TRUE)
library(xlsx)
library(xlsx)
write.xlsx(EC, "test_go.xlsx")
str(EC)
head(EC)
dim(EC)
## Not run:
# # Load the included dataset
data(EC)
## Not run:
# # Load the included dataset
data(EC)
library('GOplot')
library('GOplot')
## Not run:
# # Load the included dataset
data(EC)
write.csv(EC,"test_data.csv")
view(EC)
View(EC)
View(eset)
View(EC[eset])
View(EC['eset'])
View(EC[['eset']])
df <- read.csv('kegg_serum.csv')
df <- read.csv('kegg_serum.csv')
View(df)
list('est'=df)
test = list('est'=df)
View(test)
install.packages('GOplot')
install.packages("GOplot")
df <- read.csv('kegg_serum.csv')
View(df)
# # Building the circ object
circ <- circle_dat(EC$david, EC$genelist)
## Not run:
# # Load the included dataset
data(EC)
library('GOplot')
## Not run:
# # Load the included dataset
data(EC)
circ <- circle_dat(EC$david, EC$genelist)
View(circ)
df <- read.csv('kegg_serum.csv')
GOCircle(df)
summary(df)
GOCircle(df)
install_github('wencke/wencke.github.io')
library(devt)
library(devtools)
install_github('wencke/wencke.github.io')
library(devtools)
install_github('wencke/wencke.github.io')
devtools::install_github("wencke/wencke.github.io")
install.packages('htmltools')
install.packages("htmltools")
library(htmltools)
devtools::install_github("wencke/wencke.github.io")
install.packages('GOplot')
df <- read.csv('kegg_serum.csv')
GOCircle(df)
GOCircle(df)
library(GOplot)
df <- read.csv('kegg_serum.csv')
GOCircle(df)
detach("package:base", unload = TRUE)
detach("package:GOplot", unload = TRUE)
library(GOplot)
devtools::install_github("wencke/wencke.github.io")
df <- read.csv('kegg_serum.csv')
GOCircle(df)
df <- read.csv('kegg_serum.csv')
View(df)
GOCircle(df)
